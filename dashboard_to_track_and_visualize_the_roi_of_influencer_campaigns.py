# -*- coding: utf-8 -*-
"""Dashboard to track and visualize the ROI of influencer campaigns.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CP07R4SAjlrlP-BjmyoQDElFIjoiwN2X
"""

from IPython.display import display, HTML

# Create styled header with developer info and project details
header_html = """
<div style="
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 30px;
    border-radius: 20px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    margin: 20px 0;
    text-align: center;
">
    <div style="
        background: rgba(255,255,255,0.1);
        padding: 25px;
        border-radius: 15px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    ">
        <h1 style="
            font-size: 42px;
            margin: 0 0 10px 0;
            color: #ffffff;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            font-weight: 700;
        ">🚀 Akshat Thakur</h1>

        <div style="
            background: rgba(255,255,255,0.15);
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
            display: inline-block;
            min-width: 400px;
        ">
            <h3 style="color: #ffd700; margin: 0 0 15px 0; font-size: 20px;">📧 Contact & Profile Links</h3>
            <p style="margin: 8px 0; font-size: 16px;">
                <strong>📧 Email:</strong>
                <a href="mailto:akshatthakur.official@gmail.com"
                   style="color: #87ceeb; text-decoration: none; font-weight: 500;">
                   akshatthakur.official@gmail.com
                </a>
            </p>
            <p style="margin: 8px 0; font-size: 16px;">
                <strong>💼 LinkedIn:</strong>
                <a href="https://www.linkedin.com/in/akshatthakurofficial"
                   target="_blank"
                   style="color: #87ceeb; text-decoration: none; font-weight: 500;">
                   linkedin.com/in/akshatthakurofficial
                </a>
            </p>
            <p style="margin: 8px 0; font-size: 16px;">
                <strong>🔗 GitHub:</strong>
                <a href="https://github.com/1AkshatThakur1"
                   target="_blank"
                   style="color: #87ceeb; text-decoration: none; font-weight: 500;">
                   github.com/1AkshatThakur1
                </a>
            </p>
            <p style="margin: 8px 0; font-size: 16px;">
                <strong>💻 LeetCode:</strong>
                <a href="https://leetcode.com/u/1AkshatThakur1/"
                   target="_blank"
                   style="color: #87ceeb; text-decoration: none; font-weight: 500;">
                   leetcode.com/u/1AkshatThakur1
                </a>
            </p>
        </div>
    </div>
</div>

<div style="
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    color: white;
    padding: 30px;
    border-radius: 20px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    margin: 20px 0;
">
    <div style="
        background: rgba(255,255,255,0.1);
        padding: 25px;
        border-radius: 15px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    ">
        <h2 style="
            font-size: 32px;
            margin: 0 0 20px 0;
            color: #ffffff;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            text-align: center;
        ">📊 Influencer Campaign ROI Dashboard</h2>

        <div style="
            background: rgba(255,255,255,0.15);
            padding: 25px;
            border-radius: 12px;
            margin: 20px 0;
        ">
            <h3 style="color: #ffd700; margin: 0 0 15px 0; font-size: 20px;">🎯 Project Overview</h3>
            <p style="margin: 12px 0; font-size: 16px; line-height: 1.6; text-align: justify;">
                A comprehensive <strong>open-source dashboard</strong> designed to track and visualize the ROI of
                influencer marketing campaigns. This tool provides advanced analytics for campaign performance,
                incremental ROAS calculations, influencer insights, and automated payout tracking.
            </p>

            <div style="display: flex; flex-wrap: wrap; gap: 15px; margin: 20px 0;">
                <div style="
                    background: rgba(255,255,255,0.2);
                    padding: 15px;
                    border-radius: 8px;
                    flex: 1;
                    min-width: 200px;
                ">
                    <h4 style="color: #87ceeb; margin: 0 0 10px 0; font-size: 16px;">📈 Key Features</h4>
                    <ul style="margin: 0; padding-left: 20px; font-size: 14px; line-height: 1.5;">
                        <li>Campaign Performance Tracking</li>
                        <li>ROAS & ROI Calculations</li>
                        <li>Influencer Performance Rankings</li>
                        <li>Interactive Data Visualizations</li>
                    </ul>
                </div>

                <div style="
                    background: rgba(255,255,255,0.2);
                    padding: 15px;
                    border-radius: 8px;
                    flex: 1;
                    min-width: 200px;
                ">
                    <h4 style="color: #87ceeb; margin: 0 0 10px 0; font-size: 16px;">🛠️ Technology Stack</h4>
                    <ul style="margin: 0; padding-left: 20px; font-size: 14px; line-height: 1.5;">
                        <li>Python & Pandas</li>
                        <li>Plotly for Visualizations</li>
                        <li>Google Colab Environment</li>
                        <li>Interactive Jupyter Notebooks</li>
                    </ul>
                </div>
            </div>

            <div style="
                background: rgba(0,255,127,0.2);
                border: 2px solid rgba(0,255,127,0.4);
                padding: 15px;
                border-radius: 10px;
                margin: 20px 0;
                text-align: center;
            ">
                <p style="margin: 0; font-size: 16px; font-weight: 600;">
                    🎉 <strong>Status:</strong> Dashboard Ready for Analysis & Insights Generation
                </p>
            </div>
        </div>
    </div>
</div>

<div style="
    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    color: #333;
    padding: 20px;
    border-radius: 15px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    margin: 20px 0;
    text-align: center;
">
    <p style="
        margin: 0;
        font-size: 18px;
        font-weight: 600;
        color: #ffffff;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
    ">
        🔥 Ready to Transform Your Influencer Marketing Strategy with Data-Driven Insights! 🔥
    </p>
</div>
"""

# Display the styled header
display(HTML(header_html))

# Print completion message
print("🎯 Dashboard initialized successfully!")
print("📊 Ready to analyze influencer campaign performance")
print("="*60)

"""#**Install Required Packages**"""

# Install all required packages
!pip install pandas numpy plotly ipywidgets

print("✅ All packages installed successfully!")

"""#**Import Libraries and Setup**"""

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import random
from IPython.display import display, HTML
import warnings
warnings.filterwarnings('ignore')

print("📚 All libraries imported successfully!")

"""##**Data Generation Functions**"""

def generate_sample_data():
    """Generate sample data for the dashboard"""

    # Sample influencers
    influencers = pd.DataFrame({
        'id': range(1, 21),
        'name': [f'Influencer_{i}' for i in range(1, 21)],
        'category': np.random.choice(['Fashion', 'Tech', 'Lifestyle', 'Food', 'Beauty'], 20),
        'gender': np.random.choice(['Male', 'Female', 'Other'], 20),
        'follower_count': np.random.randint(10000, 1000000, 20),
        'platform': np.random.choice(['Instagram', 'TikTok', 'YouTube'], 20)
    })

    # Sample posts
    posts_data = []
    for inf_id in influencers['id']:
        num_posts = np.random.randint(5, 15)
        for _ in range(num_posts):
            posts_data.append({
                'influencer_id': inf_id,
                'platform': influencers[influencers['id'] == inf_id]['platform'].iloc[0],
                'date': datetime.now() - timedelta(days=np.random.randint(1, 90)),
                'url': f'https://platform.com/post_{np.random.randint(1000, 9999)}',
                'caption': f'Sample caption for post',
                'reach': np.random.randint(1000, 100000),
                'likes': np.random.randint(50, 5000),
                'comments': np.random.randint(10, 500)
            })
    posts = pd.DataFrame(posts_data)

    # Sample tracking data
    tracking_data = []
    campaigns = ['Summer_2024', 'Holiday_Sale', 'New_Launch', 'Brand_Awareness', 'Black_Friday']
    products = ['Product_A', 'Product_B', 'Product_C', 'Product_D', 'Product_E']

    for _ in range(800):
        tracking_data.append({
            'source': np.random.choice(['organic', 'paid', 'influencer'], p=[0.2, 0.3, 0.5]),
            'campaign': np.random.choice(campaigns),
            'influencer_id': np.random.choice(influencers['id']),
            'user_id': f'user_{np.random.randint(1000, 9999)}',
            'product': np.random.choice(products),
            'date': datetime.now() - timedelta(days=np.random.randint(1, 90)),
            'orders': np.random.randint(1, 8),
            'revenue': np.random.uniform(25, 800)
        })
    tracking = pd.DataFrame(tracking_data)

    # Sample payouts
    payouts_data = []
    for inf_id in influencers['id']:
        payout_basis = np.random.choice(['post', 'order'], p=[0.4, 0.6])
        if payout_basis == 'post':
            rate = np.random.uniform(100, 1500)
            orders = 0
            total_payout = rate
        else:
            rate = np.random.uniform(5, 80)
            orders = np.random.randint(3, 60)
            total_payout = rate * orders

        payouts_data.append({
            'influencer_id': inf_id,
            'basis': payout_basis,
            'rate': rate,
            'orders': orders,
            'total_payout': total_payout
        })
    payouts = pd.DataFrame(payouts_data)

    return influencers, posts, tracking, payouts

print("🔧 Data generation functions ready!")

"""#**Analytics Functions**"""

def calculate_roas(tracking_df, payouts_df):
    """Calculate ROAS by influencer"""
    revenue_by_influencer = tracking_df.groupby('influencer_id')['revenue'].sum()
    payout_by_influencer = payouts_df.groupby('influencer_id')['total_payout'].sum()

    roas_df = pd.DataFrame({
        'influencer_id': revenue_by_influencer.index,
        'total_revenue': revenue_by_influencer.values,
        'total_payout': payout_by_influencer.reindex(revenue_by_influencer.index).fillna(0).values
    })

    roas_df['roas'] = roas_df['total_revenue'] / roas_df['total_payout'].replace(0, 1)
    roas_df['roi_percent'] = (roas_df['roas'] - 1) * 100

    return roas_df

def get_campaign_metrics(tracking_df, payouts_df):
    """Calculate key campaign metrics"""
    total_revenue = tracking_df['revenue'].sum()
    total_orders = tracking_df['orders'].sum()
    total_payout = payouts_df['total_payout'].sum()
    overall_roas = total_revenue / total_payout if total_payout > 0 else 0

    return {
        'total_revenue': total_revenue,
        'total_orders': total_orders,
        'total_payout': total_payout,
        'overall_roas': overall_roas
    }

print("📊 Analytics functions ready!")

"""#**Load and Prepare Data**"""

# Generate sample data
print("🔄 Generating sample data...")
influencers, posts, tracking, payouts = generate_sample_data()

# Calculate ROAS
roas_data = calculate_roas(tracking, payouts)

# Merge with influencer data
merged_data = roas_data.merge(influencers, left_on='influencer_id', right_on='id')

# Calculate key metrics
metrics = get_campaign_metrics(tracking, payouts)

print("✅ Data loaded and prepared!")
print(f"📋 Dataset Summary:")
print(f"   - Influencers: {len(influencers)}")
print(f"   - Posts: {len(posts)}")
print(f"   - Tracking Records: {len(tracking)}")
print(f"   - Payout Records: {len(payouts)}")

"""#**Display Key Metrics Dashboard**"""

# Dashboard Header
display(HTML("""
<div style='background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); padding: 20px; border-radius: 10px; margin-bottom: 20px;'>
    <h1 style='color: white; text-align: center; margin: 0; font-size: 28px;'>
        📊 Influencer Campaign ROI Dashboard
    </h1>
    <p style='color: white; text-align: center; margin: 5px 0 0 0; font-size: 16px;'>
        Track and visualize the ROI of your influencer marketing campaigns
    </p>
</div>
"""))

# Key Metrics Cards
display(HTML(f"""
<div style='display: flex; gap: 15px; margin-bottom: 30px; flex-wrap: wrap;'>
    <div style='flex: 1; min-width: 200px; background: #f8f9fa; padding: 20px; border-radius: 10px; border-left: 5px solid #28a745;'>
        <h3 style='margin: 0; color: #28a745; font-size: 16px;'>💰 Total Revenue</h3>
        <p style='margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #333;'>${metrics['total_revenue']:,.2f}</p>
    </div>
    <div style='flex: 1; min-width: 200px; background: #f8f9fa; padding: 20px; border-radius: 10px; border-left: 5px solid #dc3545;'>
        <h3 style='margin: 0; color: #dc3545; font-size: 16px;'>💳 Total Payouts</h3>
        <p style='margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #333;'>${metrics['total_payout']:,.2f}</p>
    </div>
    <div style='flex: 1; min-width: 200px; background: #f8f9fa; padding: 20px; border-radius: 10px; border-left: 5px solid #007bff;'>
        <h3 style='margin: 0; color: #007bff; font-size: 16px;'>📈 Overall ROAS</h3>
        <p style='margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #333;'>{metrics['overall_roas']:.2f}x</p>
    </div>
    <div style='flex: 1; min-width: 200px; background: #f8f9fa; padding: 20px; border-radius: 10px; border-left: 5px solid #ffc107;'>
        <h3 style='margin: 0; color: #ffc107; font-size: 16px;'>🛒 Total Orders</h3>
        <p style='margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #333;'>{metrics['total_orders']:,}</p>
    </div>
</div>
"""))

print("✅ Key metrics dashboard displayed!")

"""#**Campaign Performance Analysis**"""

print("📈 CAMPAIGN PERFORMANCE ANALYSIS")
print("=" * 50)

# Revenue by Campaign
campaign_revenue = tracking.groupby('campaign')['revenue'].sum().sort_values(ascending=False)
print("\n💰 Revenue by Campaign:")
for campaign, revenue in campaign_revenue.items():
    print(f"   {campaign}: ${revenue:,.2f}")

# Campaign Performance Chart
fig_campaign = px.bar(
    x=campaign_revenue.index,
    y=campaign_revenue.values,
    title="📊 Revenue by Campaign",
    labels={'x': 'Campaign', 'y': 'Revenue ($)'},
    color=campaign_revenue.values,
    color_continuous_scale='viridis'
)
fig_campaign.update_layout(
    height=400,
    showlegend=False,
    title_font_size=16
)
fig_campaign.show()

# Orders by Platform
platform_data = tracking.merge(
    influencers[['id', 'platform']],
    left_on='influencer_id',
    right_on='id'
)
platform_orders = platform_data.groupby('platform')['orders'].sum()

print("\n🛒 Orders by Platform:")
for platform, orders in platform_orders.items():
    print(f"   {platform}: {orders:,} orders")

# Platform Orders Chart
fig_platform = px.pie(
    values=platform_orders.values,
    names=platform_orders.index,
    title="🎯 Orders Distribution by Platform",
    color_discrete_sequence=px.colors.qualitative.Set3
)
fig_platform.update_layout(height=400)
fig_platform.show()

"""#**ROAS Analysis and Top Performers**"""

print("💰 ROAS ANALYSIS")
print("=" * 50)

# Top Performers by ROAS
top_roas = merged_data.nlargest(10, 'roas')[
    ['name', 'category', 'platform', 'follower_count', 'roas', 'total_revenue', 'total_payout']
].round(2)

print("\n🏆 Top 10 Performers by ROAS:")
display(top_roas)

# Top ROAS Chart
fig_roas = px.bar(
    top_roas,
    x='name',
    y='roas',
    color='category',
    title="🏆 Top 10 Influencers by ROAS",
    labels={'name': 'Influencer', 'roas': 'ROAS', 'category': 'Category'},
    text='roas'
)
# ✅ FIXED: Use update_layout instead of update_xaxis
fig_roas.update_layout(
    xaxis_tickangle=45,
    height=500
)
fig_roas.update_traces(texttemplate='%{text:.1f}x', textposition='outside')
fig_roas.show()

# ROAS vs Follower Count Scatter
fig_scatter = px.scatter(
    merged_data,
    x='follower_count',
    y='roas',
    color='category',
    size='total_revenue',
    hover_data=['name', 'platform'],
    title="📈 ROAS vs Follower Count Analysis",
    labels={
        'follower_count': 'Follower Count',
        'roas': 'ROAS',
        'total_revenue': 'Revenue ($)'
    }
)
fig_scatter.update_layout(height=500)
fig_scatter.show()

# Category Performance
category_performance = merged_data.groupby('category').agg({
    'roas': 'mean',
    'total_revenue': 'sum',
    'total_payout': 'sum'
}).round(2)

print("\n📊 Performance by Category:")
display(category_performance)

"""#**Underperformers and Risk Analysis**"""

print("⚠️ RISK ANALYSIS & UNDERPERFORMERS")
print("=" * 50)

# Poor performers (ROAS < 1.5)
poor_performers = merged_data[merged_data['roas'] < 1.5][
    ['name', 'category', 'platform', 'roas', 'total_revenue', 'total_payout', 'roi_percent']
].round(2).sort_values('roas')

if not poor_performers.empty:
    print(f"\n🚨 {len(poor_performers)} Underperforming Influencers (ROAS < 1.5x):")
    display(poor_performers)

    # Risk Analysis Chart
    fig_risk = px.bar(
        poor_performers.head(10),
        x='name',
        y='roas',
        color='category',
        title="🚨 Underperforming Influencers - Action Required",
        labels={'name': 'Influencer', 'roas': 'ROAS'}
    )
    fig_risk.add_hline(y=1.0, line_dash="dash", line_color="red",
                      annotation_text="Break-even Line")
    fig_risk.update_xaxis(tickangle=45)
    fig_risk.update_layout(height=400)
    fig_risk.show()
else:
    display(HTML("""
    <div style='background: #d4edda; border: 1px solid #c3e6cb; padding: 15px; border-radius: 5px; margin: 10px 0;'>
        <h4 style='color: #155724; margin: 0;'>🎉 Excellent Performance!</h4>
        <p style='color: #155724; margin: 5px 0 0 0;'>All influencers are performing well with ROAS > 1.5x</p>
    </div>
    """))

# Performance distribution
roas_ranges = pd.cut(merged_data['roas'],
                    bins=[0, 1, 2, 3, 5, float('inf')],
                    labels=['<1x', '1-2x', '2-3x', '3-5x', '>5x'])
roas_distribution = roas_ranges.value_counts().sort_index()

print(f"\n📈 ROAS Distribution:")
for range_label, count in roas_distribution.items():
    percentage = (count / len(merged_data)) * 100
    print(f"   {range_label}: {count} influencers ({percentage:.1f}%)")

"""#**Payout Analysis**"""

print("💳 PAYOUT ANALYSIS")
print("=" * 50)

# Payout by basis
payout_basis = payouts.groupby('basis').agg({
    'total_payout': 'sum',
    'influencer_id': 'count'
}).round(2)
payout_basis.columns = ['Total_Payout', 'Count']

print("\n💰 Payout Structure:")
display(payout_basis)

# Payout Basis Chart
fig_basis = px.pie(
    values=payout_basis['Total_Payout'],
    names=payout_basis.index,
    title="💳 Payout Distribution by Basis",
    color_discrete_sequence=['#ff9999', '#66b3ff']
)
fig_basis.update_layout(height=400)
fig_basis.show()

# Detailed Payout Table
payout_details = payouts.merge(
    influencers[['id', 'name', 'category', 'platform']],
    left_on='influencer_id',
    right_on='id'
)[['name', 'category', 'platform', 'basis', 'rate', 'orders', 'total_payout']].round(2)

print("\n📋 Detailed Payout Information:")
display(payout_details.head(15))

# Average payout by category
avg_payout_category = payout_details.groupby('category')['total_payout'].agg(['mean', 'sum', 'count']).round(2)
avg_payout_category.columns = ['Avg_Payout', 'Total_Payout', 'Count']

print(f"\n📊 Average Payout by Category:")
display(avg_payout_category)

"""#**Advanced Insights and Recommendations**"""

print("🔍 ADVANCED INSIGHTS & RECOMMENDATIONS")
print("=" * 60)

# Calculate advanced metrics
avg_roas = merged_data['roas'].mean()
median_roas = merged_data['roas'].median()
best_category = merged_data.groupby('category')['roas'].mean().idxmax()
best_platform = merged_data.groupby('platform')['roas'].mean().idxmax()
high_performers = len(merged_data[merged_data['roas'] > 3.0])
total_influencers = len(merged_data)

# ROI efficiency by follower segments
merged_data['follower_segment'] = pd.cut(
    merged_data['follower_count'],
    bins=[0, 50000, 200000, 500000, float('inf')],
    labels=['Micro (10K-50K)', 'Mid (50K-200K)', 'Macro (200K-500K)', 'Mega (500K+)']
)

segment_performance = merged_data.groupby('follower_segment').agg({
    'roas': ['mean', 'median'],
    'total_revenue': 'sum',
    'total_payout': 'sum'
}).round(2)

print("\n📊 Performance by Influencer Segment:")
display(segment_performance)

# Executive Summary
display(HTML(f"""
<div style='background: #e3f2fd; padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #1976d2;'>
    <h3 style='color: #1976d2; margin-top: 0;'>📋 Executive Summary</h3>
    <ul style='color: #333; line-height: 1.6;'>
        <li><strong>Average ROAS:</strong> {avg_roas:.2f}x across all campaigns</li>
        <li><strong>Median ROAS:</strong> {median_roas:.2f}x (more representative of typical performance)</li>
        <li><strong>Best Performing Category:</strong> {best_category} with highest average ROAS</li>
        <li><strong>Top Platform:</strong> {best_platform} delivers the best returns</li>
        <li><strong>High Performers:</strong> {high_performers} out of {total_influencers} influencers have ROAS > 3.0x ({(high_performers/total_influencers)*100:.1f}%)</li>
        <li><strong>Total Campaign Value:</strong> ${metrics['total_revenue']:,.2f} revenue generated from ${metrics['total_payout']:,.2f} invested</li>
        <li><strong>Overall ROI:</strong> {((metrics['overall_roas']-1)*100):.1f}% return on investment</li>
    </ul>
</div>
"""))

# Strategic Recommendations
display(HTML(f"""
<div style='background: #fff3e0; padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f57c00;'>
    <h3 style='color: #f57c00; margin-top: 0;'>🎯 Strategic Recommendations</h3>
    <ol style='color: #333; line-height: 1.8;'>
        <li><strong>Focus Investment:</strong> Prioritize {best_category} influencers on {best_platform} platform</li>
        <li><strong>Budget Reallocation:</strong> Consider reducing spend on underperforming segments (ROAS < 1.5x)</li>
        <li><strong>Performance Optimization:</strong> Investigate what makes top performers successful and replicate strategies</li>
        <li><strong>Scaling Opportunity:</strong> High-performing influencers show potential for increased investment</li>
        <li><strong>Diversification:</strong> Test new platforms and categories to expand successful campaigns</li>
        <li><strong>Contract Optimization:</strong> Review payout structures for better alignment with performance</li>
    </ol>
</div>
"""))

"""#**Data Export Functions**"""

print("📥 DATA EXPORT OPTIONS")
print("=" * 40)

def export_to_csv():
    """Export all data to CSV files"""

    # Export main datasets
    influencers.to_csv('influencers_data.csv', index=False)
    posts.to_csv('posts_data.csv', index=False)
    tracking.to_csv('tracking_data.csv', index=False)
    payouts.to_csv('payouts_data.csv', index=False)

    # Export analysis results
    merged_data.to_csv('roas_analysis.csv', index=False)
    top_roas.to_csv('top_performers.csv', index=False)

    print("✅ Data exported to CSV files:")
    print("   - influencers_data.csv")
    print("   - posts_data.csv")
    print("   - tracking_data.csv")
    print("   - payouts_data.csv")
    print("   - roas_analysis.csv")
    print("   - top_performers.csv")

# Export function ready
print("📋 Export functions ready!")
print("Run: export_to_csv() to download all data as CSV files")

# Quick data summary for verification
print(f"\n📊 Final Data Summary:")
print(f"   - Total Influencers: {len(influencers)}")
print(f"   - Total Posts: {len(posts)}")
print(f"   - Total Tracking Records: {len(tracking)}")
print(f"   - Average ROAS: {avg_roas:.2f}x")
print(f"   - Campaign ROI: {((metrics['overall_roas']-1)*100):.1f}%")

"""#**Run Export**"""

# Uncomment the line below to export all data to CSV files
# export_to_csv()

print("🎉 Dashboard Setup Complete!")
print("\n" + "="*50)
print("📊 Your Influencer ROI Dashboard is now ready!")
print("="*50)
print("\n✨ Features Available:")
print("   ✅ Campaign Performance Analysis")
print("   ✅ ROAS Calculations & Visualizations")
print("   ✅ Influencer Performance Rankings")
print("   ✅ Risk Analysis & Underperformers")
print("   ✅ Payout Tracking & Analysis")
print("   ✅ Strategic Insights & Recommendations")
print("   ✅ Data Export Capabilities")
print("\n🚀 You can now analyze your influencer campaigns effectively!")